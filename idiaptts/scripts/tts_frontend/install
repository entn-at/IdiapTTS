#!/usr/bin/env bash

# Copyright 2017 by Idiap Research Institute, http://www.idiap.ch
#
# Author(s):
#   Bastian Schnell, DATE
#
# In-depth Description:
#
#

usage() {
cat <<- EOF
    usage: $PROGNAME [OPTIONS] <arg1>
    
    Program installs the language specific files into the correct festival directory.

    OPTIONS:
        -h                        show this help

    
EOF
}

###############################
# Default options and functions
#
# set -o xtrace # Prints every command before running it, same as "set -x".
# set -o errexit # Exit when a command fails, same as "set -e".
#                # Use "|| true" for those who are allowed to fail.
#                # Disable (set +e) this mode if you want to know a nonzero return value.
# set -o pipefail # Catch mysqldump fails.
# set -o nounset # Exit when using undeclared variables, same as "set -u".
# set -o noclobber # Prevents the bash shell from overwriting files, but you can force it with ">|".
export SHELLOPTS # Used to pass above shell options to any called subscripts.

readonly PROGNAME=$(basename $0)
readonly PROGDIR=$(readlink -m $(dirname $0))
readonly ARGS="$@"

# Provide log function. Use source bash_logging.sh if file exists in current PATH variable.
# source does not work with -u option, so disable it temporarily.
# set +u
# source bash_logging.sh
# set -u
log()
{
    echo -e >&2 "$@"
}

# Die should be called when an error occurs with a HELPFUL error message.
die () {
    log "ERROR" "$@"
    exit 1
}

# The main function of this file.
main()
{
    log "INFO" "Run ${PROGNAME} $@"
    
    # Read parameters.
    while getopts ":h" flag; do # If a character is followed by a colon (e.g. f:), that option is expected to have an argument.
        case "${flag}" in
            -) case "${OPTARG}" in
                   *) die "Invalid option: --${OPTARG}" ;;
               esac;;
            h) usage; exit ;;
            \?) die "Invalid option: -$OPTARG" ;;
            :)  die "Option -$OPTARG requires an argument." ;;
        esac
    done
    shift $(($OPTIND - 1)) # Skip the already processed arguments.
    
    # Read arguments.
    local expectedArgs=1 # Always use "local" for variables, global variables are evil anyway.
    if [[ $# != "${expectedArgs}" ]]; then
        usage # Function call.
        die "Wrong number of parameters, expected ${expectedArgs} but got $#."
    fi    
    # Read and check parameter.
    local dir_festival=${1:-}
    if [ ! -f ${dir_festival}/bin/festival ]; then
        die "Wrong path to festival directory. Cannot find /bin/festival in ${dir_festival}"
    fi
    
    ##################################
    # Main functionality of this file.
    #
    mkdir -p festival_files
    echo "Extract files..."
    tar xzf English/festival_files.tar.gz festival_files/
    echo "Done"

    echo "Copy to festival directory..."
    cp -r festival_files/* ${dir_festival}
    echo "Done"
    
    echo "Clean up..."
    rm -r festival_files
    echo "Done"
}

# Call the main function, provide all parameters.
main "$@"
